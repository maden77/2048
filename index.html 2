<!DOCTYPE html>
<html>
<head>
    <title>2048 with Sound</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
        }
        #game-container {
            width: 460px;
            margin: 0 auto;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(4, 100px);
            grid-gap: 10px;
            background-color: #bbada0;
            padding: 10px;
            border-radius: 5px;
            margin: 20px auto;
        }
        .cell {
            width: 100px;
            height: 100px;
            background-color: #cdc1b4;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 36px;
            font-weight: bold;
            border-radius: 5px;
        }
        .tile-2 { background-color: #eee4da; }
        .tile-4 { background-color: #ede0c8; }
        /* Tambahkan lebih banyak kelas tile untuk nilai lainnya */
        #score-container {
            margin: 20px 0;
            font-size: 24px;
        }
        #mute-btn {
            padding: 8px 16px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <h1>2048</h1>
        <div id="score-container">Score: <span id="score">0</span></div>
        <button id="mute-btn">Mute</button>
        <div class="grid" id="game-board"></div>
    </div>

    <!-- Elemen Audio -->
    <audio id="move-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-arcade-game-jump-coin-216.mp3" preload="auto"></audio>
    <audio id="merge-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-positive-interface-beep-221.mp3" preload="auto"></audio>
    <audio id="gameover-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-retro-arcade-lose-2027.mp3" preload="auto"></audio>
    <audio id="win-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-winning-chimes-2015.mp3" preload="auto"></audio>

    <script>
        // Inisialisasi game
        const board = document.getElementById('game-board');
        const scoreDisplay = document.getElementById('score');
        const moveSound = document.getElementById('move-sound');
        const mergeSound = document.getElementById('merge-sound');
        const gameoverSound = document.getElementById('gameover-sound');
        const winSound = document.getElementById('win-sound');
        const muteBtn = document.getElementById('mute-btn');
        
        let grid = [];
        let score = 0;
        let isMuted = false;

        // Fungsi mainkan suara
        function playSound(sound) {
            if (!isMuted && sound) {
                sound.currentTime = 0;
                sound.play().catch(e => console.log("Audio play failed:", e));
            }
        }

        // Tombol mute
        muteBtn.addEventListener('click', function() {
            isMuted = !isMuted;
            this.textContent = isMuted ? "Unmute" : "Mute";
        });

        // Inisialisasi papan
        function createBoard() {
            for (let i = 0; i < 16; i++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                board.appendChild(cell);
            }
            
            // Buat array 2D untuk grid
            grid = [
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0]
            ];
            
            addRandomTile();
            addRandomTile();
            updateBoard();
        }

        // Tambahkan tile acak
        function addRandomTile() {
            const emptyCells = [];
            for (let row = 0; row < 4; row++) {
                for (let col = 0; col < 4; col++) {
                    if (grid[row][col] === 0) {
                        emptyCells.push({ row, col });
                    }
                }
            }
            
            if (emptyCells.length > 0) {
                const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];
                grid[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;
                return true;
            }
            return false;
        }

        // Update tampilan papan
        function updateBoard() {
            const cells = document.querySelectorAll('.cell');
            for (let row = 0; row < 4; row++) {
                for (let col = 0; col < 4; col++) {
                    const index = row * 4 + col;
                    const value = grid[row][col];
                    
                    cells[index].textContent = value === 0 ? '' : value;
                    cells[index].className = 'cell';
                    if (value > 0) {
                        cells[index].classList.add(`tile-${value}`);
                    }
                }
            }
            scoreDisplay.textContent = score;
        }

        // Fungsi gerakan
        function moveTiles(direction) {
            let moved = false;
            const oldGrid = JSON.parse(JSON.stringify(grid));
            
            // Rotasi grid untuk menyederhanakan logika gerakan
            if (direction === 'up' || direction === 'down') {
                grid = transpose(grid);
            }
            if (direction === 'right' || direction === 'down') {
                grid = grid.map(row => row.reverse());
            }
            
            // Proses gerakan ke kiri
            for (let row = 0; row < 4; row++) {
                let newRow = grid[row].filter(val => val !== 0);
                for (let i = 0; i < newRow.length - 1; i++) {
                    if (newRow[i] === newRow[i + 1]) {
                        newRow[i] *= 2;
                        newRow[i + 1] = 0;
                        score += newRow[i];
                        playSound(mergeSound);
                    }
                }
                newRow = newRow.filter(val => val !== 0);
                while (newRow.length < 4) {
                    newRow.push(0);
                }
                if (JSON.stringify(grid[row]) !== JSON.stringify(newRow)) {
                    moved = true;
                }
                grid[row] = newRow;
            }
            
            // Kembalikan rotasi
            if (direction === 'right' || direction === 'down') {
                grid = grid.map(row => row.reverse());
            }
            if (direction === 'up' || direction === 'down') {
                grid = transpose(grid);
            }
            
            if (moved) {
                playSound(moveSound);
                addRandomTile();
                updateBoard();
                
                if (isGameOver()) {
                    setTimeout(() => {
                        playSound(gameoverSound);
                        alert('Game Over! Score: ' + score);
                    }, 100);
                }
                
                // Cek apakah ada tile 2048
                for (let row = 0; row < 4; row++) {
                    for (let col = 0; col < 4; col++) {
                        if (grid[row][col] === 2048) {
                            setTimeout(() => {
                                playSound(winSound);
                                alert('You Win! Score: ' + score);
                            }, 100);
                        }
                    }
                }
            }
        }

        // Fungsi bantu transpose matrix
        function transpose(matrix) {
            return matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));
        }

        // Cek game over
        function isGameOver() {
            // Cek apakah ada cell kosong
            for (let row = 0; row < 4; row++) {
                for (let col = 0; col < 4; col++) {
                    if (grid[row][col] === 0) {
                        return false;
                    }
                }
            }
            
            // Cek apakah ada penggabungan yang mungkin
            for (let row = 0; row < 4; row++) {
                for (let col = 0; col < 4; col++) {
                    const value = grid[row][col];
                    // Cek tetangga kanan
                    if (col < 3 && grid[row][col + 1] === value) {
                        return false;
                    }
                    // Cek tetangga bawah
                    if (row < 3 && grid[row + 1][col] === value) {
                        return false;
                    }
                }
            }
            
            return true;
        }

        // Event listener keyboard
        document.addEventListener('keydown', function(event) {
            switch (event.key) {
                case 'ArrowUp':
                    moveTiles('up');
                    break;
                case 'ArrowRight':
                    moveTiles('right');
                    break;
                case 'ArrowDown':
                    moveTiles('down');
                    break;
                case 'ArrowLeft':
                    moveTiles('left');
                    break;
            }
        });

        // Mulai game
        createBoard();
    </script>
</body>
</html>
